package com.loopers.mock.jpa;

import org.springframework.util.ReflectionUtils;

import java.lang.reflect.Field;
import java.time.ZonedDateTime; // LocalDateTime 대신 ZonedDateTime 사용
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

public abstract class FakeJpaRepository<T> {

    protected final AtomicLong autoGeneratedId = new AtomicLong(0);
    protected final List<T> data = Collections.synchronizedList(new ArrayList<>());

    protected void setIdByReflection(T entity, Long id) {
        try {
            Field idField = entity.getClass().getSuperclass().getDeclaredField("id");
            idField.setAccessible(true);
            ReflectionUtils.setField(idField, entity, id);
        } catch (NoSuchFieldException e) {
            throw new RuntimeException("Failed to set ID via reflection", e);
        }
    }

    protected void setCreatedAtByReflection(T entity) { // 매개변수 제거
        try {
            Field createdAtField = entity.getClass().getSuperclass().getDeclaredField("createdAt");
            createdAtField.setAccessible(true);
            ReflectionUtils.setField(createdAtField, entity, ZonedDateTime.now()); // ZonedDateTime.now() 사용
        } catch (NoSuchFieldException e) {
            System.err.println("Warning: 'createdAt' field not found. Skipping reflection for createdAt.");
        }
    }

    public T save(T entity) {
        if (getId(entity) == null || getId(entity) == 0) {
            setIdByReflection(entity, autoGeneratedId.incrementAndGet());
            setCreatedAtByReflection(entity); // 매개변수 없이 호출
            data.add(entity);
        } else {
            data.removeIf(e -> getId(e).equals(getId(entity)));
            data.add(entity);
        }
        return entity;
    }

    public void clear() {
        data.clear();
    }

    protected abstract Long getId(T entity);
}
